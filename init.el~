;;;;
;; Packages
;;;;

;; Define package repositories
(require 'package)

(setq package-archives '(("elpa" . "http://tromey.com/elpa/")
                         ("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa-stable.milkbox.net/packages/")))


;; Load and activate emacs packages. Do this first so that the
;; packages are loaded before you start trying to modify them.
;; This also sets the load path.
(package-initialize)

;; Download the ELPA archive description if needed.
;; This informs Emacs about the latest versions of all packages, and
;; makes them available for download.
(when (not package-archive-contents)
  (package-refresh-contents))

;; The packages you want installed. You can also install these
;; manually with M-x package-install
;; Add in your own as you wish:
(defvar my-packages
  '(;; makes handling lisp expressions much, much easier
    ;; Cheatsheet: http://www.emacswiki.org/emacs/PareditCheatsheet
    use-package
    paredit

    ;; rainbow-delimters
    rainbow-delimiters

    ;; Add ruler to control column length
    fill-column-indicator

    ;; key bindings and code colorization for Clojure
    ;; https://github.com/clojure-emacs/clojure-mode
    clojure-mode

    ;; extra syntax highlighting for clojure
    clojure-mode-extra-font-locking

    ;; integration with a Clojure REPL
    ;; https://github.com/clojure-emacs/cider
    cider

    ;; Refactor support for clojure
    clj-refactor

    ;; allow ido usage in as many contexts as possible. see
    ;; customizations/navigation.el line 23 for a description
    ;; of ido
    ido-ubiquitous

    ;; Enhances M-x to allow easier execution of commands. Provides
    ;; a filterable list of possible commands in the minibuffer
    ;; http://www.emacswiki.org/emacs/Smex
    smex

    ;; project navigation
    projectile

    ;; edit html tags like sexps
    tagedit

    ;; git integration
    magit))

;; On OS X, an Emacs instance started from the graphical user
;; interface will have a different environment than a shell in a
;; terminal window, because OS X does not run a shell during the
;; login. Obviously this will lead to unexpected results when
;; calling external utilities like make from Emacs.
;; This library works around this problem by copying important
;; environment variables from the user's shell.
;; https://github.com/purcell/exec-path-from-shell
(if (eq system-type 'darwin)
    (add-to-list 'my-packages 'exec-path-from-shell))

(dolist (p my-packages)
  (when (not (package-installed-p p))
    (package-install p)))

(eval-when-compile
  (require 'use-package))
(require 'diminish)                ;; if you use :diminish
(require 'bind-key)                ;; if you use any :bind variant


;; ;; Place downloaded elisp files in ~/.emacs.d/vendor. You'll then be able
;; ;; to load them.
;; ;;
;; ;; For example, if you download yaml-mode.el to ~/.emacs.d/vendor,
;; ;; then you can add the following code to this file:
;; ;;
;; ;; (require 'yaml-mode)
;; ;; (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
;; ;; 
;; ;; Adding this code will make Emacs enter yaml mode whenever you open
;; ;; a .yml file
;; (add-to-list 'load-path "~/.emacs.d/vendor")


;; ;;;;
;; ;; Customization
;; ;;;;

;; ;; Add a directory to our load path so that when you `load` things
;; ;; below, Emacs knows where to look for the corresponding file.
;; (add-to-list 'load-path "~/.emacs.d/customizations")

;; ;; Sets up exec-path-from-shell so that Emacs will use the correct
;; ;; environment variables
;; (load "shell-integration.el")

;; ;; These customizations make it easier for you to navigate files,
;; ;; switch buffers, and choose options from the minibuffer.
;; (load "navigation.el")

;; ;; These customizations change the way emacs looks and disable/enable
;; ;; some user interface elements
;; (load "ui.el")

;; ;; These customizations make editing a bit nicer.
;; (load "editing.el")

;; ;; Hard-to-categorize customizations
;; (load "misc.el")

;; ;; For editing lisps
;; (load "elisp-editing.el")

;; ;; Langauage-specific
;; (load "setup-clojure.el")
;; (load "setup-js.el")

;; ;; Smartparens
;; (use-package smartparens-config
;;     :ensure smartparens
;;     :config
;;     (progn
;;       (show-smartparens-global-mode t)))

;; (setq sp-highlight-pair-overlay nil)
;; (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
;; (add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
;; (add-hook 'prog-mode-hook 'sp-use-smartparens-bindings)

;; (defun window-toggle-split-direction ()
;;   "Switch window split from horizontally to vertically, or vice versa.
;; i.e. change right window to bottom, or change bottom window to right."
;;   (interactive)
;;   (require 'windmove)
;;   (let ((done))
;;     (dolist (dirs '((right . down) (down . right)))
;;       (unless done
;;         (let* ((win (selected-window))
;;                (nextdir (car dirs))
;;                (neighbour-dir (cdr dirs))
;;                (next-win (windmove-find-other-window nextdir win))
;;                (neighbour1 (windmove-find-other-window neighbour-dir win))
;;                (neighbour2 (if next-win (with-selected-window next-win
;;                                           (windmove-find-other-window neighbour-dir next-win)))))
;;           ;;(message "win: %s\nnext-win: %s\nneighbour1: %s\nneighbour2:%s" win next-win neighbour1 neighbour2)
;;           (setq done (and (eq neighbour1 neighbour2)
;;                           (not (eq (minibuffer-window) next-win))))
;;           (if done
;;               (let* ((other-buf (window-buffer next-win)))
;;                 (delete-window next-win)
;;                 (if (eq nextdir 'right)
;;                     (split-window-vertically)
;;                   (split-window-horizontally))
;;                 (set-window-buffer (windmove-find-other-window neighbour-dir) other-buf))))))))

;; (global-set-key (kbd "C-x 4") 'window-toggle-split-direction)

;; ;; On Mac, rebind option key to default and command key to meta
;; (setq mac-option-key-is-meta nil)
;; (setq mac-command-key-is-meta t)
;; (setq mac-command-modifier 'meta)
;; (setq mac-option-modifier nil)
